// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String       @unique
  emailVerified  DateTime?
  password       String
  image          String?
  role           String       @default("employee") // admin, manager, employee
  position       String?
  department     String?
  joinedAt       DateTime     @default(now())
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Employee specific data
  attendances    Attendance[]
  githubActivities GithubActivity[]
  meetings         Meeting[]      @relation("UserMeetings")
  createdMeetings  Meeting[]     @relation("MeetingOrganizer")
  performance      Performance[]
  tasks            Task[]
  meetingsAttending MeetingAttendee[]
  githubUsername   String?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application specific models
model Attendance {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkIn     DateTime  @default(now())
  checkOut    DateTime?
  status      String    @default("present") // present, absent, late, half_day, on_leave
  date        DateTime  @default(now())
  description String?
}

model GithubActivity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  commitCount Int      @default(0)
  prCount     Int      @default(0)
  issueCount  Int      @default(0)
  repository  String?
  date        DateTime @default(now())
}

model Meeting {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  location     String?
  meetingLink  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  organizerId  String   @db.ObjectId
  organizer    User     @relation("MeetingOrganizer", fields: [organizerId], references: [id])
  userId       String   @db.ObjectId
  user         User     @relation("UserMeetings", fields: [userId], references: [id])
  attendees    MeetingAttendee[]
}

model MeetingAttendee {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  meetingId String   @db.ObjectId
  userId    String   @db.ObjectId
  status    String   @default("pending") // pending, accepted, declined, attended
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([meetingId, userId])
}

model Performance {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date        DateTime
  rating      Float
  feedback    String?
  achievements String?
  goals       String?
}

model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      String    @default("pending") // pending, in-progress, completed
  priority    String    @default("medium") // low, medium, high
  dueDate     DateTime?
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
