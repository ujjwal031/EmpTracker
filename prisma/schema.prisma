// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(EMPLOYEE)
  position      String?
  department    String?
  joinedAt      DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  
  // Employee specific data
  attendance    Attendance[]
  githubActivities GithubActivity[]
  meetings      MeetingAttendee[]
  performance   Performance[]
  createdMeetings Meeting[]     @relation("MeetingOrganizer")
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application specific models
model Attendance {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  checkIn   DateTime
  checkOut  DateTime?
  status    AttendanceStatus
  notes     String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  ON_LEAVE
}

model GithubActivity {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  activityType GithubActivityType
  repository  String
  commitMessage String?
  pullRequestTitle String?
  pullRequestNumber Int?
  issueTitle  String?
  issueNumber Int?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum GithubActivityType {
  COMMIT
  PULL_REQUEST
  ISSUE
  REVIEW
}

model Meeting {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  meetingLink String?
  createdAt   DateTime @default(now())
  organizerId String
  organizer   User     @relation("MeetingOrganizer", fields: [organizerId], references: [id])
  attendees   MeetingAttendee[]
}

model MeetingAttendee {
  id        String   @id @default(cuid())
  meetingId String
  userId    String
  status    AttendeeStatus @default(PENDING)
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([meetingId, userId])
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
  ATTENDED
}

model Performance {
  id          String   @id @default(cuid())
  date        DateTime
  rating      Float    @db.DoublePrecision
  feedback    String?
  achievements String?
  goals       String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
